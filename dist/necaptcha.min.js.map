{"version":3,"file":"necaptcha.min.js","sources":["../src/necaptcha.jsx"],"sourcesContent":["import React from 'react';\n\nexport default class NECaptcha extends React.Component {\n  static defaultProps = {\n    className: 'i-necaptcha',\n    // captchaId: '',\n    // element: '',\n    // mode: '',\n    // protocol: '',\n    width: 'auto',\n    lang: 'zh-CN',\n    // appendTo: '',\n    onReady: instance => {},\n    onVerify: () => {},\n    onClose: () => {},\n    onLoad: instance => {},\n    onError: err => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.dom = null;\n    this.state = {\n      ins: null,\n      script: null,\n    };\n  }\n\n  // componentWillMount() {\n  //   const that = this;\n  //   console.log('componentWillMount', that.props, that.state);\n  // }\n\n  componentDidMount() {\n    const that = this;\n    // console.log('componentDidMount', that.props, that.state);\n    that.init();\n  }\n\n  // componentWillReceiveProps(nextProps) {\n  //   const that = this;\n  //   console.log('componentWillReceiveProps', that.props, nextProps);\n  // }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   const that = this;\n  //   // console.log('shouldComponentUpdate', that.props, nextProps, that.state, nextState);\n  //   return nextProps.captchaId !== that.props.captchaId;\n  // }\n\n  // componentWillUpdate(nextProps, nextState) {\n  //   const that = this;\n  //   console.log('componentWillUpdate', that.props, nextProps, that.state, nextState);\n  // }\n\n  componentDidUpdate(prevProps, prevState) {\n    const that = this;\n    // console.log('componentDidUpdate', prevProps, that.props, prevState, that.state);\n    that.init();\n  }\n\n  componentWillUnmount() {\n    const that = this;\n    // console.log('componentWillUnmount', that.props, that.state);\n    that.destroy();\n  }\n\n  init = () => {\n    const that = this;\n    // console.log('_init');\n\n    if (window.initNECaptcha) {\n      that.ready();\n      return;\n    }\n\n    const ds = document.createElement('script');\n    ds.type = 'text/javascript';\n    ds.async = true;\n    ds.charset = 'utf-8';\n\n    if (ds.readyState) {\n      ds.onreadystatechange = () => {\n        if (ds.readyState === 'loaded' || ds.readyState === 'complete') {\n          ds.onreadystatechange = null;\n          that.ready();\n        }\n      };\n    } else {\n      ds.onload = () => {\n        ds.onload = null;\n        that.ready();\n      };\n    }\n\n    const protocol = window.location.protocol === 'http:' ? 'http:' : 'https:';\n    ds.src = `${protocol}//cstaticdun.126.net/load.min.js?_t=${new Date().getTime()}`;\n    const s = document.getElementsByTagName('script')[0];\n    s.parentNode.insertBefore(ds, s);\n\n    that.setState({\n      script: ds,\n    });\n  };\n\n  ready = () => {\n    const that = this;\n    // console.log('_ready');\n    const { captchaId, width, lang, onReady, onVerify, onClose, onLoad, onError } = that.props;\n    const { ins } = that.state;\n\n    if (!window.initNECaptcha) {\n      return;\n    }\n\n    if (ins) {\n      return;\n    }\n\n    if (!that.dom) {\n      return;\n    }\n\n    const config = {\n      captchaId,\n      element: that.dom,\n      width,\n      lang,\n      onReady,\n      onVerify,\n      onClose,\n    };\n\n    if (that.props.mode) {\n      config.mode = that.props.mode;\n    }\n\n    if (that.props.protocol) {\n      config.protocol = that.props.protocol;\n    }\n\n    if (that.props.appendTo) {\n      config.appendTo = that.props.appendTo;\n    }\n\n    window.initNECaptcha(\n      config,\n      instance => {\n        that.setState({\n          ins: instance,\n        });\n\n        onLoad && onLoad(instance);\n      },\n      onError\n    );\n  };\n\n  destroy = () => {\n    const that = this;\n    // that.state.script.parentNode.removeChild(that.state.script);\n    that.setState({\n      ins: null,\n      script: null,\n    });\n  };\n\n  render() {\n    const that = this;\n    // console.log('render');\n    const { className } = that.props;\n\n    return (\n      <div\n        className={className}\n        ref={e => {\n          that.dom = e;\n        }}\n      />\n    );\n  }\n}\n"],"names":["NECaptcha","props","that","window","initNECaptcha","ready","ds","document","createElement","type","async","charset","readyState","onreadystatechange","onload","protocol","location","src","Date","getTime","s","getElementsByTagName","parentNode","insertBefore","setState","script","captchaId","width","lang","onReady","onVerify","onClose","onLoad","onError","ins","state","dom","config","element","mode","appendTo","instance","React","Component","this","init","prevProps","prevState","destroy","className","ref","e","err"],"mappings":"83BAEqBA,yBAiBPC,iJACJA,0EA+CD,eACCC,aAGFC,OAAOC,cACTF,EAAKG,iBAIDC,EAAKC,SAASC,cAAc,UAClCF,EAAGG,KAAO,kBACVH,EAAGI,OAAQ,EACXJ,EAAGK,QAAU,QAETL,EAAGM,WACLN,EAAGO,mBAAqB,WACA,WAAlBP,EAAGM,YAA6C,aAAlBN,EAAGM,aACnCN,EAAGO,mBAAqB,KACxBX,EAAKG,UAITC,EAAGQ,OAAS,WACVR,EAAGQ,OAAS,KACZZ,EAAKG,aAIHU,EAAwC,UAA7BZ,OAAOa,SAASD,SAAuB,QAAU,SAClET,EAAGW,cAASF,kDAA+C,IAAIG,MAAOC,eAChEC,EAAIb,SAASc,qBAAqB,UAAU,GAClDD,EAAEE,WAAWC,aAAajB,EAAIc,GAE9BlB,EAAKsB,SAAS,CACZC,OAAQnB,yBAIJ,eACAJ,YAE0EA,EAAKD,MAA7EyB,IAAAA,UAAWC,IAAAA,MAAOC,IAAAA,KAAMC,IAAAA,QAASC,IAAAA,SAAUC,IAAAA,QAASC,IAAAA,OAAQC,IAAAA,QAC5DC,EAAQhC,EAAKiC,MAAbD,OAEH/B,OAAOC,gBAIR8B,GAIChC,EAAKkC,SAIJC,EAAS,CACbX,UAAAA,EACAY,QAASpC,EAAKkC,IACdT,MAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,SAAAA,EACAC,QAAAA,GAGE7B,EAAKD,MAAMsC,OACbF,EAAOE,KAAOrC,EAAKD,MAAMsC,MAGvBrC,EAAKD,MAAMc,WACbsB,EAAOtB,SAAWb,EAAKD,MAAMc,UAG3Bb,EAAKD,MAAMuC,WACbH,EAAOG,SAAWtC,EAAKD,MAAMuC,UAG/BrC,OAAOC,cACLiC,EACA,SAAAI,GACEvC,EAAKsB,SAAS,CACZU,IAAKO,IAGPT,GAAUA,EAAOS,IAEnBR,0BAIM,mBAGHT,SAAS,CACZU,IAAK,KACLT,OAAQ,WA9ILW,IAAM,OACND,MAAQ,CACXD,IAAK,KACLT,OAAQ,8PAtByBiB,EAAMC,6DAgC5BC,KAERC,kDAmBYC,EAAWC,GACfH,KAERC,sDAIQD,KAERI,+CAwGC9C,EAAO0C,KAELK,EAAc/C,EAAKD,MAAnBgD,iBAGNP,uBACEO,UAAWA,EACXC,IAAK,SAAAC,GACHjD,EAAKkC,IAAMe,mDA9KAnD,iBACG,CACpBiD,UAAW,cAKXtB,MAAO,OACPC,KAAM,QAENC,QAAS,SAAAY,KACTX,SAAU,aACVC,QAAS,aACTC,OAAQ,SAAAS,KACRR,QAAS,SAAAmB"}